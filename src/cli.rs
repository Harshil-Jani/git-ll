use std::process::Command;

use crate::clap_config::{Cli, Commands};
use crate::llama::ask_llama;

pub async fn handle_cli(cli: Cli) {
    match &cli.command {
        Commands::Ask { prompt } => {
            process_ask(prompt.to_string()).await;
        }
        Commands::Diff { commit1, commit2 } => {
            process_diff(commit1.clone(), commit2.clone()).await;
        }
    }
}

async fn process_ask(prompt: String) {
    println!("{}", prompt);
    let response = ask_llama(prompt.to_string()).await.unwrap();
    println!("{}", response);
}

async fn process_diff(commit1: Option<String>, commit2: Option<String>) {
    let (args, description) = prepare_diff_args_and_description(&commit1, &commit2);

    println!("{}", description);
    let output = Command::new("git")
        .args(&args)
        .output()
        .expect("Failed to execute git diff");

    let output_str = String::from_utf8_lossy(&output.stdout).to_string();
    let prompt = format!(
        "Take a look at the diff generated by git and summarize the changes into concise points, providing a file-wise summary: {}",
        output_str
    );
    let response = ask_llama(prompt)
        .await
        .expect("Failed to get summary from LLaMA");
    println!("{}", response);
}

fn prepare_diff_args_and_description<'a>(
    commit1: &'a Option<String>,
    commit2: &'a Option<String>
) -> (Vec<&'a str>, String) {
    match (commit1, commit2) {
        (Some(c1), Some(c2)) => (
            vec!["diff", &c1, &c2],
            format!("Diffing commits {} and {}", c1, c2)
        ),
        (Some(c1), None) => (
            vec!["diff", &c1],
            format!("Diffing commit {} with HEAD", c1)
        ),
        (None, Some(c2)) => (
            vec!["diff", "HEAD", &c2],
            format!("Diffing HEAD with commit {}", c2)
        ),
        (None, None) => (
            vec!["diff"],
            "Diffing unstaged changes with HEAD".to_string()
        ),
    }
}